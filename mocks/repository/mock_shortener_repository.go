// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	shortener "url-shortener/domain/shortener"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAllKeys mocks base method.
func (m *MockRepository) GetAllKeys() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllKeys")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllKeys indicates an expected call of GetAllKeys.
func (mr *MockRepositoryMockRecorder) GetAllKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllKeys", reflect.TypeOf((*MockRepository)(nil).GetAllKeys))
}

// GetByShortenedURL mocks base method.
func (m *MockRepository) GetByShortenedURL(req string) (*shortener.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortenedURL", req)
	ret0, _ := ret[0].(*shortener.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortenedURL indicates an expected call of GetByShortenedURL.
func (mr *MockRepositoryMockRecorder) GetByShortenedURL(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortenedURL", reflect.TypeOf((*MockRepository)(nil).GetByShortenedURL), req)
}

// SetKeys mocks base method.
func (m *MockRepository) SetKeys(req []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeys", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeys indicates an expected call of SetKeys.
func (mr *MockRepositoryMockRecorder) SetKeys(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeys", reflect.TypeOf((*MockRepository)(nil).SetKeys), req)
}

// Store mocks base method.
func (m *MockRepository) Store(req *shortener.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockRepositoryMockRecorder) Store(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRepository)(nil).Store), req)
}

// StoreKey mocks base method.
func (m *MockRepository) StoreKey(req *shortener.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreKey", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreKey indicates an expected call of StoreKey.
func (mr *MockRepositoryMockRecorder) StoreKey(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreKey", reflect.TypeOf((*MockRepository)(nil).StoreKey), req)
}
